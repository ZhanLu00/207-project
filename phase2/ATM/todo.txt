put anything that need to do later here to reminds yourself and your group member!



Phase 2:
Part 1: fix problems from phase 1

    Zhan
    + BankManager/Client ActionHandler:
        - refactor so that it works as operators
        - split the method .displaycommendline() into classes below

    Zhan
    + Viewer: BankManagerViewer, ClientActionViewer

    Seel
    + AtmApplication: refactor needed, add viewers

    Roger & Karen
    + Transactions: add attribute: "type" (further discussion needed)

    Roger & Karen - DONE
    + History: (in BankAccount) is empty

    Roger & Karen - DONE
    + BankAccount:
        - .undoTransaction, if the last transaction was payBill, an error will occur
        - chequingAccount: there is suppose to have primary withdraw account and non-primary withdraw account

    Roger & Karen - DONE
    + AccountManager:
        - makesure it withdraw from primary withdraw account for chequingAccount

    Joyce
    + Testing:
        - need test cases to test our application, this is very important
        - need sample input files for testing


For references, phase 1 specification could be found below:
https://q.utoronto.ca/courses/68685/pages/project-phase-1-specification-for-the-atm-machine?module_item_id=586196


Part 2: add the following feature

    Roger & Karen - DONE
    + All Debt accounts should have a maximum amount of debt you can incur.
        - add max_debt in debt attribute
        - add method in account manager to change the max_debt


    Joyce
    + Add one more type of account (of your choice) that has at least one property that is different from existing accounts. Feel free to look at bank websites for ideas.
        - lottery account

    !!!!!! move lottery out side of the folder, its a new type account

    Seel- DONE
    + Add one more type of employee of the bank who has less access than the manager, but can also be a user with their own accounts.
        - cra: can view everything, and send alert to bank manager (no access to cash
        - supervisor(theif): cash access

    Killed
    + Make sure you can demo time-sensitive features, like adding interest to savings accounts each month.
        - out a file that contains update info of inetest

    Seel - DONE
    + Improve the manager "undo" functionality. There is more than one way to interpret this statement. For example, you could have unlimited undo capability for the manager, or the ability to specify a number n so that the system undoes n transactions on an account, or you could have undo functionality for a user's previous n transactions (as opposed to an account's previous transactions). You can interpret this statement in any reasonable way that is as complex as the above suggestions.
        - update the transaction history thingy

    Joyce - DONE by seel accidentally sorry
    + Refactor so that you can have joint user accounts where two distinct users can both withdraw, deposit, and check the balance on the same account.
        -  this is easy to do

    Seel - DONE
    + transaction Manager:
        - show all the history
        - give id, pull all the history
        - undo transactions
        - undo a random transaction


For detailed informatin, phase 2 specification could be found below:
https://q.utoronto.ca/courses/68685/pages/phase-2?module_item_id=615276




Part 3: be creative and add more features to our app!
(Personalize your program. Add any features you want so that your finished program is twice as complex (or more) than your Phase 1 submission.)

    Yuhan & Zhan
    + UI:
        - design pages( a lot of them)
            - welcome page
            - log in page
            - new user request page
            - client page
            - bank manager page
            - bank inspector page

        - implement components
            - buttons
            - textfield
            - pop ups
            - labels
        - stay alive

    Zhan
    + implement MVC


    + currency: food, time (easyish)
        - attribute: currency
        - bill manager: coverting currency

    Joyce
    + communism:


Office Hour:
    - welcome page: request for creation of new user
    - user page: request for creation of bank account
    - bankManager will need to deal with requests of creations accounts (could either accept or decline)
    - GUI: move the main method from ATMGUI to a new class where it run the viewer
    - GUI: split the class into smaller classes, eg. create classes for buttons and different component

