put anything that need to do later here to reminds yourself and your group member!



Phase 2:
Part 1: fix problems from phase 1

    + BankMnager/Client ActionHandler:
        - refactor so that it works as operators
        - split the method .displaycommendline() into classes below

    + Viewer: BankManagerViewer, ClientActionViewer

    + AtmApplication: refactor needed, add viewers

    + Transactions: add attribute: "type" (further discussion needed)

    + History: (in BankAccount) is empty

    + BankAccount:
        - .undoTransaction, if the last transaction was payBill, an error will occur
        - chequingAccount: there is suppose to have primary withdraw account and non-primary withdraw account

    + AccountManager:
        - makesure it withdraw from primary withdraw account for chequingAccount

    + Testing:
        - need test cases to test our application, this is very important
        - need sample input files for testing


For references, phase 1 specification could be found below:
https://q.utoronto.ca/courses/68685/pages/project-phase-1-specification-for-the-atm-machine?module_item_id=586196

Part 2: add the following feature

    + All Debt accounts should have a maximum amount of debt you can incur.

    + Add one more type of account (of your choice) that has at least one property that is different from existing accounts. Feel free to look at bank websites for ideas.

    + Add one more type of employee of the bank who has less access than the manager, but can also be a user with their own accounts.

    + Make sure you can demo time-sensitive features, like adding interest to savings accounts each month.

    + Improve the manager "undo" functionality. There is more than one way to interpret this statement. For example, you could have unlimited undo capability for the manager, or the ability to specify a number n so that the system undoes n transactions on an account, or you could have undo functionality for a user's previous n transactions (as opposed to an account's previous transactions). You can interpret this statement in any reasonable way that is as complex as the above suggestions.

    + Refactor so that you can have join accounts where two distinct users can both withdraw, deposit, and check the balance on the same account.


For detailed informatin, phase 2 specification could be found below:
https://q.utoronto.ca/courses/68685/pages/phase-2?module_item_id=615276

Part 3: be creative and add more features to our app!

